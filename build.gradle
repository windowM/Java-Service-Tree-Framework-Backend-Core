buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id "org.sonarqube" version "3.4.0.2513"
    id 'org.springframework.boot' version '2.3.12.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'com.palantir.docker' version '0.28.0'
    id 'maven-publish'
    id 'project-report'
    id 'build-dashboard'
    id 'com.github.jk1.dependency-license-report' version '1.17'
}

sonarqube {
    properties {
        property "sonar.projectKey", "Java-Service-Tree-Framework-Backend-Core"
        property "sonar.host.url", "http://www.313.co.kr/sonar"
        property "sonar.login", "admin"
        property "sonar.password", "qwe123"
    }
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

javadoc {
    destinationDir = file("${buildDir}/docs/javadoc")
}

import com.github.jk1.license.render.*
import com.github.jk1.license.importer.*

licenseReport {
    // By default this plugin will collect the union of all licenses from
    // the immediate pom and the parent poms. If your legal team thinks this
    // is too liberal, you can restrict collected licenses to only include the
    // those found in the immediate pom file
    // Defaults to: true
    //unionParentPomLicenses = false

    // Set output directory for the report data.
    // Defaults to ${project.buildDir}/reports/dependency-license.
    outputDir = "$projectDir/build/licenses"

    // Select projects to examine for dependencies.
    // Defaults to current project and all its subprojects
    projects = [project] + project.subprojects

    // Adjust the configurations to fetch dependencies. Default is 'runtimeClasspath'
    // For Android projects use 'releaseRuntimeClasspath' or 'yourFlavorNameReleaseRuntimeClasspath'
    // Use 'ALL' to dynamically resolve all configurations:
    // configurations = ALL
    configurations = ['runtimeClasspath']

    // List the groups ids to exclude from dependency report. Supports regular expressions.
    // For finer granularity, see: excludes.
    excludeGroups = ['do.not.want']

    // List the ids (in module:name format) to exclude from dependency report. Supports regular expressions.
    // By default excludes is empty.
    excludes = ['moduleGroup:moduleName']

    // Don't include artifacts of project's own group into the report
    excludeOwnGroup = true

    // Don't exclude bom dependencies.
    // If set to true, then all boms will be excluded from the report
    excludeBoms = false

    // Set custom report renderer, implementing ReportRenderer.
    // Yes, you can write your own to support any format necessary.
    //renderers = [new XmlReportRenderer('third-party-libs.xml', 'Back-End Libraries')]
    renderers = [new InventoryHtmlReportRenderer("report.html", "Backend")]

    // Set importers to import any external dependency information, i.e. from npm.
    // Custom importer should implement DependencyDataImporter interface.
    //importers = [new XmlReportImporter('Frontend dependencies', file(frontend_libs.xml))]

    // This is for the allowed-licenses-file in checkLicense Task
    // Accepts File, URL or String path to local or remote file
    allowedLicensesFile = new File("$projectDir/allowed-licenses.json")
}

import org.apache.tools.ant.taskdefs.condition.Os

ext {
    image = "313devgrp/java-service-tree-framework-backend-core"

    //향후 릴리즈와 스냅샷을 구분할 때 하기 코드를 사용할 것.
    //artifactType = System.getenv("ARTIFACT_TYPE") ? System.getenv("ARTIFACT_TYPE").toUpperCase() : "SNAPSHOT"
    //repositoryType = "${artifactType}".equalsIgnoreCase("RELEASE") ? "release" : "snapshot"
    //업로드 타입 정의 ( maven-release, maven-snapshot, ${repositoryType})
    repositoryUrl = "http://www.313.co.kr/nexus/repository/ple-releases/"
    metadataUrl = "${repositoryUrl}313devgrp/Java-Service-Tree-Framework-Backend-Core/maven-metadata.xml"

    //version 정보
    majorVersion = 23
    minorVersion = 05
    //patchVersion = auto generation

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        println "*** Windows is not support build "
    }else {
        exec {
            executable "wget"
            args "-O", "${projectDir}/metadata.xml", "${metadataUrl}"
        }
    }   //mac os의 경우 106~113까지 주석처리
    def metadataFile = new XmlSlurper().parse(new File("${projectDir}/metadata.xml"))
    String latest = metadataFile."versioning"."latest"
    String versionPrefix = latest.split("-")[0]
    def (latestMajorVersion, latestMinorVersion, latestPatchVersion) = versionPrefix.tokenize(".")
    if ( majorVersion > latestMajorVersion.toInteger()){
        minorVersion = 0
        patchVersion = 0
    } else if (minorVersion > latestMinorVersion.toInteger()){
        patchVersion = 0
    } else {
        patchVersion = latestPatchVersion.toInteger() + 1
    }
}

task printVersion(){
    doLast {
        println bootJar.version
    }
}

group = "313devgrp"
version = "${majorVersion}.${minorVersion}.${patchVersion}"

bootJar {
    baseName = project.name
    version =  project.version
}

task generatePublishInfo {
    def targetFile = new File("${projectDir}/spinnaker.properties")
    targetFile.parentFile.mkdirs()
    targetFile.withWriter("UTF-8") { w ->
        w.writeLine "groupId = " + project.group
        w.writeLine "artifactId = " + project.name
        w.writeLine "version = " + project.version
    }
}

publish {
    dependsOn generatePublishInfo
}

def getMavenSettingsCredentials = {
    String userHome = System.getProperty("user.home")
    File mavenSettings = new File ( userHome, ".m2/settings.xml")

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        if(!mavenSettings.exists()){
            mavenSettings = new File("${projectDir}/settings.xml")
        }
    }else {
        if(!mavenSettings.exists()){
            mavenSettings = new File ("${projectDir}/settings.xml")
        }
    }
    def xmlSlurper = new XmlSlurper()
    def output = xmlSlurper.parse(mavenSettings)
    return output."servers"."server"
}

def getCredentials = {
    def entries = getMavenSettingsCredentials()

    for ( entry in entries ) {
        if (project.version.endsWith("-SNAPSHOT") && entry."id".text() == "snapshots"){
            return [username: entry.username.text(), password: entry.password.text()]
        }else {
            return [username: entry.username.text(), password: entry.password.text()]
        }
    }
}

publishing {
    def mvnCredential = getCredentials()
    repositories {
        maven {
            credentials{
                username mvnCredential["username"]
                password mvnCredential["password"]
            }
            url "${repositoryUrl}"
            allowInsecureProtocol true
        }
    }

    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version
            artifact bootJar
        }
    }
}

repositories {
    mavenCentral()
    maven {
        url 'http://www.313.co.kr/nexus/repository/ple-releases/'
        allowInsecureProtocol true
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Hoxton.SR9"
    }
}

dependencies {

    implementation('org.projectlombok:lombok')
    annotationProcessor('org.projectlombok:lombok')

    implementation group: 'commons-lang', name: 'commons-lang', version: '2.6'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    implementation group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
    implementation group: 'org.unitils', name: 'unitils', version: '2.4'
    implementation group: 'net.sourceforge.collections', name: 'collections-generic', version: '4.01'

    // spring
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-aop')
    implementation "org.springframework.boot:spring-boot-starter-cache"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation('org.springframework.boot:spring-boot-starter-validation')

    //Caused by: java.lang.ClassNotFoundException: org.springframework.security.web.savedrequest.DefaultSavedRequest
    implementation group: 'org.springframework.security', name: 'spring-security-web', version: '5.3.13.RELEASE'
    // Caused by: java.lang.ClassNotFoundException: org.keycloak.adapters.springsecurity.token.KeycloakAuthenticationToken
    implementation group: 'org.keycloak', name: 'keycloak-spring-security-adapter', version: '12.0.4'


    // hibernate
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation group: 'org.hibernate', name: 'hibernate-core', version: '5.6.15.Final'
    implementation group: 'org.hibernate', name: 'hibernate-entitymanager', version: '5.6.15.Final'
    implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.5'
    implementation group: 'javax.mail', name: 'mail', version: '1.4.7'

    // modelmapper
    implementation 'org.modelmapper:modelmapper:3.1.1'

    // dwr
    //implementation group: 'org.directwebremoting', name: 'dwr', version: '3.0.2-RELEASE'
    implementation '313devgrp:dwr:3.1.3:RELEASE'

    //mybatis
    implementation group: 'org.mybatis.spring.boot', name: 'mybatis-spring-boot-starter', version: '2.1.3'

    //mysql
    implementation 'mysql:mysql-connector-java:8.0.32'
    implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'

    // Swagger
    implementation('io.springfox:springfox-swagger2:2.9.2')
    implementation('io.springfox:springfox-swagger-ui:2.9.2')

    // Zipkin
    implementation('org.springframework.cloud:spring-cloud-starter-sleuth')
    implementation('org.springframework.cloud:spring-cloud-starter-zipkin')

    // redis - session
    implementation('org.springframework.boot:spring-boot-starter-data-redis')
    implementation('org.springframework.session:spring-session-data-redis')

    // flyway
    implementation 'org.flywaydb:flyway-core'
    
    //jira
    implementation 'com.atlassian.event:atlassian-event:3.0.0'
    implementation 'com.atlassian.fugue:fugue:2.2.1'
    implementation 'com.atlassian.httpclient:atlassian-httpclient-api:2.0.0'
    implementation 'com.atlassian.httpclient:atlassian-httpclient-library:2.0.0'
    implementation 'com.atlassian.sal:sal-api:3.0.7'

    implementation 'com.atlassian.jira:jira-rest-java-client-app:5.1.6'
    implementation 'com.atlassian.jira:jira-rest-java-client-api:5.1.6'
    implementation 'com.atlassian.jira:jira-rest-java-client-core:5.1.6'

    implementation 'io.atlassian.fugue:fugue:3.0.0'
    implementation 'io.atlassian.util.concurrent:atlassian-util-concurrent:4.0.1'


    // poi
    implementation 'org.apache.poi:poi:5.1.0'
    implementation 'org.apache.poi:poi-ooxml:5.1.0'


}

configurations {
    compile.exclude group: "org.slf4j", module: "slf4j-log4j12"
}

docker {
    name "313.co.kr:5550/${image}:${project.version}"
    noCache true
    tags "${project.version}"
    files tasks.bootJar.outputs.files, 'docker-entrypoint.sh'
    buildArgs(['JAR_FILE': tasks.bootJar.outputs.files.singleFile.name, 'ENTRY_FILE': 'docker-entrypoint.sh'])
}